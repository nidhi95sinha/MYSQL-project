### Section A --> 

### Reading the data from all tables.
SELECT * FROM customer;

SELECT * FROM orderitem;

SELECT * FROM orders;

SELECT * FROM product;

SELECT * FROM supplier;

####################################################################################################################
## 	Finding the country wise count of customers.
SELECT Country, COUNT(*) AS Customer_count FROM customer
GROUP BY Country;

####################################################################################################################
## 	Displaying the products which are not discontinued.
SELECT * FROM product
WHERE IsDiscontinued = 0;

####################################################################################################################
## 	Displaying the list of companies along with the product name that they are supplying.
SELECT S.CompanyName, PR.ProductName FROM product PR
JOIN supplier AS S
ON S.Id = PR.SupplierId
WHERE PR.IsDiscontinued = 0;

#####################################################################################################################
##	Displaying customer's information who stays in 'Mexico'.
SELECT * FROM customer
WHERE Country = "Mexico";

#####################################################################################################################
## 	Displaying the costliest item that is ordered by the customer.
SELECT OI.OrderId, OI.ProductId, PR.ProductName, PR.UnitPrice AS Costliest_Item
FROM orderitem AS OI
JOIN product AS PR ON OI.ProductId = PR.Id
WHERE PR.UnitPrice = (
    SELECT MAX(UnitPrice)
    FROM product)
ORDER BY Costliest_Item DESC
LIMIT 1;




#####################################################################################################################
## Displaying supplier id who owns highest number of products.
SELECT SupplierId, COUNT(Id) AS product_count 
FROM product
GROUP BY SupplierId
ORDER BY product_count DESC
LIMIT 1;


######################################################################################################################
##	Displaying month wise and year wise count of the orders placed.
SELECT date_format(OrderDate, '%Y') AS Year, date_format(OrderDate, '%M') AS Month, COUNT(*) AS Order_count
FROM orders 
GROUP BY Year, month
ORDER BY Year, Month;


######################################################################################################################
##	Displaying which country has maximum suppliers.
SELECT Country, COUNT(*) AS Supplier_count
FROM supplier
GROUP BY Country
ORDER BY Supplier_count DESC
LIMIT 1;



######################################################################################################################
##	Displaying which customers did not place any order.
SELECT c.* FROM customer AS C JOIN orders AS O
ON C.Id = O.CustomerId
WHERE O.CustomerId = 0;






########################################################################################################################

##	Arranging the product id, product name based on high demand by the customer.
SELECT pr.Id, pr.ProductName, COUNT(oi.OrderId) AS Order_count
FROM product pr LEFT JOIN orderitem AS oi
ON pr.Id = oi.ProductId
GROUP BY pr.Id, pr.ProductName
ORDER BY Order_count DESC;



##	Displaying the number of orders delivered every year.
SELECT YEAR(OrderDate) AS Year, COUNT(OrderNumber) AS number_of_orders_delivered FROM orders
GROUP BY Year;



##	Calculating year-wise total revenue.
SELECT SUM(TotalAmount) AS Total_Revenue, YEAR(OrderDate) AS Year FROM orders
GROUP BY Year;




##	Displaying the customer details whose order amount is maximum including all his orders.
SELECT c.*, MAX(o.TotalAmount) AS Max_order_amount FROM customer AS c LEFT JOIN orders AS o
ON c.Id = o.CustomerId
GROUP BY c.Id
ORDER BY Max_order_amount DESC;



##	Displaying total amount ordered by each customer from high to low.
SELECT c.Id,c.FirstName,SUM(o.TotalAmount) AS total_amount_ordered  FROM orders AS o
LEFT JOIN customer AS c
ON c.Id = o.CustomerId
GROUP BY c.Id
ORDER BY total_amount_ordered DESC;




## A sales and marketing department of this company wants to find out how frequently customer have business with them.
## List the current and previous order amount for each customers.
WITH Ordered_orders AS 
(
SELECT CustomerId, Id, TotalAmount,
ROW_NUMBER() OVER (PARTITION BY CustomerId ORDER BY OrderDate DESC) AS Order_rank FROM orders
)
SELECT O1.CustomerId, O1.Id AS Current_orderID, O1.TotalAmount AS Current_order_amount,
O2.Id AS Previous_orderID, O2.TotalAmount AS Previous_order_amount
FROM Ordered_orders AS O1 JOIN Ordered_orders AS O2
ON O1.CustomerId = O2.CustomerId
WHERE O1.Order_rank = 1
ORDER BY O1.CustomerId;




##	Finding out top 3 suppliers in terms of revenue generated by their products.
SELECT s.Id, s.CompanyName, SUM(oi.UnitPrice*oi.Quantity) AS RevenueGenerated
FROM supplier AS s JOIN product AS p
ON p.SupplierId = s.Id
JOIN orderitem AS oi
ON oi.ProductId = p.Id
GROUP BY s.Id, s.CompanyName
ORDER BY RevenueGenerated DESC
LIMIT 3;



##	Displaying latest order date (should not be same as first order date) of all the customers with customer details.
SELECT c.*, MIN(o.OrderDate) AS First_order, MAX(o.OrderDate) AS Latest_order FROM orders AS o
JOIN customer AS c ON c.Id = o.CustomerId
GROUP BY c.FirstName, c.Id
HAVING First_order != Latest_order;



##	Displaying the product name and supplier name for each order
SELECT o.OrderNumber, p.ProductName, s.CompanyName AS Supplier_Name FROM product AS p
JOIN supplier AS s ON p.SupplierId = s.Id
JOIN orderitem AS oi ON oi.ProductId = p.Id
JOIN orders AS o ON o.Id = oi.OrderId;




##	Fetching the records to display the customer details who ordered more than 10 products in the single order
SELECT c.*, o.OrderNumber, COUNT(oi.ProductId) AS Product_count FROM customer AS c
JOIN orders AS o ON o.CustomerId = c.Id
JOIN orderitem AS oi ON o.Id = oi.OrderId
GROUP BY c.Id,c.FirstName, o.OrderNumber
HAVING Product_count > 10;




##	Displaying all the product details with the ordered quantity size as 1.
SELECT p.*, oi.Quantity AS ordered_quantity FROM product AS p
JOIN orderitem AS oi ON oi.ProductId = p.Id
WHERE oi.Quantity = 1;




##	Display the compan(y)ies which supplies products whose cost is above 100.
SELECT DISTINCT s.CompanyName, p.ProductName, oi.UnitPrice FROM supplier AS s
JOIN product AS p ON p.SupplierId = s.Id
JOIN orderitem AS oi ON oi.ProductId = p.Id
WHERE oi.UnitPrice > 100;



##	Creating a combined list to display customers and supplier list as per the below format.
SELECT 'Customer' AS Type, FirstName, City , Country, Phone FROM customer
UNION ALL
SELECT 'supplier' AS Type, ContactName, City, Country, Phone FROM supplier ;


 
##	Displaying the customer list who belongs to same city and country arrange in country wise.
SELECT City, Country, GROUP_CONCAT(FirstName) AS Customer_list FROM customer 
GROUP BY City, Country
ORDER BY Country;





##	Company sells the product at different discounted rates. Refer actual product price in product table and selling price in the order item 
##  table.
## Writing a query to find out total amount saved in each order then display the orders from highest to lowest amount saved. 
SELECT o.OrderNumber, SUM((p.UnitPrice - oi.UnitPrice) * oi.Quantity) AS Amount_saved
FROM orders AS o JOIN orderitem AS oi ON o.Id = oi.OrderId
JOIN product AS p ON p.Id = oi.ProductId
GROUP BY o.OrderNumber
ORDER BY Amount_saved DESC;




##	Mr. Kavin want to become a supplier. He got the database of "Richard's Supply" for reference. Help him to pick: 
## a. Listing out few products that he should choose based on demand.
SELECT pr.Id, pr.ProductName, COUNT(oi.OrderId) AS Order_count
FROM product pr JOIN orderitem AS oi
ON pr.Id = oi.ProductId
GROUP BY pr.Id, pr.ProductName
ORDER BY Order_count DESC
LIMIT 5;





## b. Displaying who will be the competitors for him for the products suggested in above questions.
WITH SelectedProduct AS
(
SELECT Id FROM product
WHERE Id IN (59,24,60,31,56)
)
SELECT s.Id AS SupplierID, s.CompanyName, sp.Id AS ProductID, p.ProductName FROM supplier AS s
JOIN product AS p ON p.SupplierId = s.Id
JOIN SelectedProduct AS sp ON p.Id = sp.Id;





##	Creating a combined list to display customers and suppliers details considering the following criteria 
## ●	Both customer and supplier belong to the same country
## ●	Customer who does not have supplier in their country
## ●	Supplier who does not have customer in their country
SELECT 'Customer' AS Type, c.Id, c.FirstName, c.City AS Location FROM customer AS c
WHERE EXISTS (SELECT 1 FROM supplier AS s WHERE s.Country = c.Country)
UNION ALL
SELECT 'Supplier' AS Type, s.Id, s.CompanyName, s.City AS Location FROM supplier AS s
WHERE EXISTS (SELECT 1 FROM customer AS c WHERE c.Country = s.Country)
UNION ALL 
SELECT 'Customer(No supplier)' AS Type, c.Id, c.FirstName, c.City AS Location FROM customer AS c
WHERE NOT EXISTS (SELECT 1 FROM supplier AS s WHERE s.Country = c.Country)
UNION ALL
SELECT 'Supplier(No Customer)' AS Type, s.Id, s.CompanyName, s.City AS Location FROM supplier AS s
WHERE EXISTS (SELECT 1 FROM customer AS c WHERE c.Country = s.Country);




##	Every supplier supplies specific products to the customers.
##  Creating a view of suppliers and total sales made by their products and writing a query on this view to 
##  find out top 2 suppliers (using windows function RANK() in each country by total sales done by the products.
CREATE VIEW SupplierSalesView AS 
SELECT s.Id AS SupplierID, s.CompanyName, s.Country, p.Id AS ProductID, p.ProductName, SUM(oi.UnitPrice * oi.Quantity) AS Total_sales
FROM product AS p
JOIN supplier AS s ON p.SupplierId = s.Id
JOIN orderitem AS oi ON oi.ProductId = p.Id
GROUP BY s.Id, s.CompanyName, s.Country, p.Id, p.ProductName;

WITH RankedSupplier AS 
(
SELECT SupplierID, CompanyName, Country,
RANK() OVER (PARTITION BY Country ORDER BY SUM(Total_sales) DESC) AS Sales_rank
FROM SupplierSalesView
GROUP BY SupplierID, CompanyName, Country
)
SELECT SupplierID, CompanyName, Country, Sales_rank FROM RankedSupplier
WHERE Sales_rank <= 2;







##	Finding out for which products, UK is dependent on other countries for the supply. 
##  Listing out the countries which are supplying these products in the same list.
WITH UK_dependent_products AS
(
SELECT DISTINCT p.Id, p.ProductName, p.SupplierId, s.Country AS Supplier_country FROM product AS P
JOIN supplier AS s ON s.Id = p.SupplierId
WHERE s.Country != 'UK'
)
SELECT DISTINCT dp.Supplier_country FROM UK_dependent_products AS dp;





